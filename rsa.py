import lab1
import random
import math

message="823789137891789217389173981378913789137289"

def generowanie_pierwszych(k):
    n = random.getrandbits(k)
    while not lab1.pierwsza_Fermat(n):
        n = random.getrandbits(k)
    return n

def generowanie_kluczy():
    p = generowanie_pierwszych(1024)
    print('p = ' + str(p))
    q = generowanie_pierwszych(1024)
    print('q = ' + str(q))
    print('\n')

    n = p * q
    phi = (p - 1) * (q - 1)

    while True:
        e = random.randint(0, phi)
        d = lab1.odwrotnosc(phi, e)

        if math.gcd(e, phi) == 1 and d > 1:
            break
    
    return n,e,d

# Generowanie klucza publicznego i prywatnego
# n,e,d = generowanie_kluczy()
# print('n = ' + str(n))
# print('e = ' + str(e))
# print('d = ' + str(d))
# print('\n')
# # publicKey = [n,e]
# # privateKey = [n,d]

# # Szyfrowanie wiadomości
# cipher = lab1.efektywne_potegowanie(int(message), int(e), int(n))
# print('c = ' + str(cipher))
# print('\n')

# # Odszyfrowywanie wiadomości
# m = lab1.efektywne_potegowanie(int(cipher), int(d), int(n))
# print('m = ' + str(m))


# print('\n')
# print('------------------------------------------------------------------------------------------------------------')
# print('\n')


# Faktoryzacja n
def obliczST(k):
  d = k
  s = 0
  while True:
    if d % 2 == 0:
      d = d // 2
      s = s + 1
    else:
      break 
  return s,d  


def faktoryzacjaN(n, e, d):
    k = e * d - 1
    s,t = obliczST(k)
    
    while True:
        a = random.randint(1,n)
        
        if math.gcd(a, n) > 1:
            return a

        v = lab1.efektywne_potegowanie(a, t, n)

        if v % n == 1:
            return 0
        
        while v % n != 1:
            v0 = v % n
            v = lab1.efektywne_potegowanie(v, 2, n)
        
        if v % n == -1:
            return 0
        else:
            p = math.gcd(v0 + 1, n)
            q = n // p
        
        return p, q

# n=14205142842144491469901035779943007321473952670460614909740188710462796861921791780746014298824348546889748863603913825380912304112461129061114480661500416910991853573649055897001583708234998530660447745535711467407798340361335928981312718926721467943464464347521000503179497153112764130114342341251457556854374337702225661788558784747007799183865452550277915792606190524979919835785502848268656744723582283945123371679980696891117277548547543492116459573915049465031893477375432302554045103150951955486083526016584926750095118984741954481489582827589374811855794969993254570253121737541317841105374871
# e=2219702669760051625529760071259189046161364151701596790770763259600544290997125107128138578832480323854037838605599695123440903054424577956799678397891626783444723950147784407335462559143107157658471735164714153971357443698994082727673072343180069044835094856719244582969485137575845153825021391095268519544748057926663150576101990156077844973202826679622719216615756960610764785110408304311098865781072786879379296360025429207038042833064515876868608188436266546466015175298619766069707237580766787423687287858279125035537409323009740621048068813783768774814593993312720811077575752373741693972477513
# d=9738454175598488918517912045396815318351885031131011603301149540233201870415928124228184903947308481461717153640402767289853198952704967449300122329014740408508653613839688094250923162490670540988214688775753190900423588412005697560323304500348114898045236656807283167901253083798426709790746938525240264995502098847606530252043043212677911465343705421183831116604350283789270965024124861992541018116786274867535581082248878546385006259988838129620903989258127062367035340066868353921340378027331177496332241490297041686454303452932424111634076797215417394272455217584601075851777273706083879476230809

# p,q = faktoryzacjaN(n, e, d)
# print(str(p))
# print('\n')
# print(str(q))

