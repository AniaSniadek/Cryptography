import random

# Zadanie 1:
def generator_Zn(n,k):
    if k > 0:
        if k == 1:
            min_number = 0
            max_number = 1
        else:    
            min_number = 2**(k-1)
            max_number = (2**k)-1

        if min_number < n:
            while True:
                result = random.randint(min_number, max_number)
                if result < n:
                    break   
            return result


# Zadanie 2:
def euklides(a,n):
    A = n
    B = a
    U = 0
    V = 1

    while B != 0:
        q = A//B
        x1 = B
        x2 = A - q*B
        A = x1
        B = x2
        x1 = V
        x2 = U - q*V
        U = x1
        V = x2
    
    d = A
    u = U
    v = (d - a*u) // n
    return u,v,d

def odwrotnosc(b, n):
    u,v,d = euklides(b,n)
    if u < 0:
        u += n
    
    return u 


# Zadanie 3:
def efektywne_potegowanie(x, k, n):
    y = 1
    binary = list((bin(int(k)))[::-1])
    binary.pop()
    binary.pop()
    l = len(binary)
    i = l - 1

    while i >= 0:
        y = y**2 % n
        if int(binary[i]) == 1:
            y = y*x % n
        i = i - 1
    return y


# Zadanie 4:
def czy_pierwsza(n):
    for i in range(2, n):
        if n % i == 0:
            return False
    return True


def reszta_kwadratowa(a, p):
    isPrime = czy_pierwsza(p)
    if isPrime:
        result = efektywne_potegowanie(a, (p-1)//2, p)
        if result == 1:
            return True
        else:
            return False
    else: 
        return False              


# Zadanie 5
def pierwiastek_kwadratowy(b, p):
    if p % 4 == 3:
        isRest = reszta_kwadratowa(b, p)
        if isRest:
            result = efektywne_potegowanie(b, (p+1)//4, p)
            return result

         
# Zadanie 6
def pierwsza_Fermat(n):
    if n == 1:
        return False
    elif n == 2 or n == 3:
        return True
    elif n > 3:
        k = 30
        while k != 0:
            a = random.randint(2, n-2)
            result = efektywne_potegowanie(a, n-1, n)
            if result != 1:
                return False
            k = k - 1

        return True

n=112909813434158887881544722151619730698348107373583616992647803336071181397049360727754778104942874837100627906903685403372455564169178188847290030735478062056503892750142466560959429215373365124983261376943932917586931720722642323591392526135159815915363872314122652904645150141414195052017310951509114306899144110415856269914255461518962825533827199319123176157303754405405725343536827841488791214990467213973469341938428965857133202725705669446268691175183720350188231959515678027844317023131732844402285288315412053688676770188338170304917187581769608496890501953438975807236931522139542441330455656
b=103877071443794969974316110496909119722118907930655165577427648153494302778612599961911969235638939283834162806575498106311726304806397847616784896249164959123874856014122354290878444063842408727207564075221813798756267409379272293366901478552505465518253818172514447153776727339549931923966504705559384955482855696653374549772743975153760987772964263842432318892139427925560640217157499568773949707398888324663966891052695455840032479403927539001278968663406062725223147343366067988472470472983141168501798175470239745780970696480123335530435469449665126747672253809057741556529662884616740137168209875

# print(odwrotnosc(n, b))
# PRINT
# print('ZADANIE 1:', generator_Zn(100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000961, 1000))
# print('ZADANIE 2:', odwrotnosc
# print('ZADANIE 3:', efektywne_potegowanie
# print('ZADANIE 4:', reszta_kwadratowa(4, 15485863))
# print('ZADANIE 5:', pierwiastek_kwadratowy(2, 15485863))
# print('ZADANIE 6:', pierwsza_Fermat
